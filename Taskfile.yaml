version: '3'
dotenv: ['.env', '.env.ports']
env:
  BUILDKIT_PROGRESS: plain

tasks:
  default:
    desc: This help
    cmds:
      - task -a --sort none
    silent: true

  init:
    desc: Initialize the project by setting up dependencies, fetching environment variables, building, and starting services
    cmds:
      - task: git-submodules
      - task: install
      - task: bw-fetch
      - task: build
      - task: start

  git-submodules:
    desc: Update git submodules
    cmds: 
      - git submodule update --init --recursive

  install: 
    desc: Install tools
    aliases: [i]
    cmds: 
      - brew install bash go-task/tap/go-task bitwarden-cli node@20 pnpm python@3 
      - npm i -g ipt
      - |
        cd n8n/customNodes
        npm install
        npm run build

  add-community-node:
    desc: Add community node
    cmds:
      - |
        cd n8n/communityNodes
        npm i --package-lock-only $(ipt -i -M "Add Community Node:" -D "n8n-nodes-")

  bw-fetch:
    desc: Fetch environment variables from Bitwarden and save to .env file
    cmds:
      - rm -rf .env.backup
      - test -f .env && mv .env .env.backup
      - bw list items --search "localhost n8n" | jq -r '.[0].notes' > .env

  bw-update:
    desc: Update Bitwarden item with the current .env file content
    cmd: |
      item="$(bw list items --search "localhost n8n" | jq '.[0]' | base64)"
      itemId=$(echo "$item" | base64 -d | jq -r '.id')
      echo "$item" | base64 -d | jq --arg notes "$(cat .env)" '.notes=$notes' | bw encode | bw edit item $itemId | jq -r .notes

  reset:
    desc: Reset N8N environment (remove volumes)
    cmds: 
      - docker compose kill
      - docker compose down -v
      - task: start

  n8n-restart:
    aliases: [rs]
    cmds:
      - docker compose down n8n
      - docker compose up -d n8n
      - docker compose logs -f n8n
      
  start:
    desc: Start docker containers
    aliases: [s]
    cmds:
      - docker compose up -d
      - docker compose logs -f

    preconditions:
      - sh: docker images | grep -q n8n && docker images | grep -q jobspy && docker images | grep -q mcp-steel
        msg: "Required docker images not found. Run 'task build' first."

  n8n-reset-password:
    desc: Reset n8n user password
    cmds:
      - docker exec -ti n8n n8n user-management:reset

  backup:
    desc: Backup n8n workflows and credentials
    cmds:
      - docker exec -ti n8n n8n export:workflow --backup --output=/backup/workflows
      - docker exec -ti n8n n8n export:credentials --backup --output=/backup/credentials

  restore:
    desc: Restore n8n workflows and credentials
    cmds:
      - docker exec -ti n8n n8n import:workflow --separate --input=/backup/workflows
      - docker exec -ti n8n n8n import:credentials --separate --input=/backup/credentials 

  build:
    desc: Build all dependencies
    aliases: [b]
    cmds: 
      - task: build-n8n
      - task: build-jobspy
      - task: build-mcp-steel
      # - task: build-tools-steel-browser
    # preconditions:
    #   - sh: docker version -f json | jq -e '(.Server.BuildTime | split(".")[0] | split("+")[0] + "Z" | fromdateiso8601) > ("2025-03-25T00:00:00Z" | fromdateiso8601)'
    #     msg: "Docker Engine build date must be after March 25, 2025 (docker version)"


  build-n8n:
    desc: Build n8n docker image
    cmds: 
      - docker pull n8nio/n8n:next
      - docker compose build n8n

  build-jobspy:
    desc: Build jobspy server docker image
    dir: n8n/mcp/jobspy-mcp-server
    cmds: 
      - task build

  build-mcp-steel:
    desc: Build mcp-steel server docker image
    dir: n8n/mcp/steel-mcp-server
    cmds:
      - npm i --package-lock-only --ignore-scripts
      - >
        docker build 
        --build-arg https_proxy=$https_proxy 
        --build-arg NODE_TLS_REJECT_UNAUTHORIZED=0
        -t mcp-steel .

  build-tools-steel-browser:
    desc: Build steel-browser tool docker image
    dir: tools/steel-browser
    cmds:
      - >
        docker build 
        -f api/Dockerfile
        --build-arg https_proxy=$https_proxy 
        --build-arg NODE_TLS_REJECT_UNAUTHORIZED=0
        -t steel-browser .
